## -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

def build(bld):
    obj = bld.create_ns3_program('hello-simulator', ['simulator'])
    obj.source = 'hello-simulator.cc'

    obj = bld.create_ns3_program('tutorial-csma-echo', ['internet-node', 'csma'])
    obj.source = 'tutorial-csma-echo.cc'

    obj = bld.create_ns3_program('tutorial-csma-echo-ascii-trace', ['internet-node', 'csma'])
    obj.source = 'tutorial-csma-echo-ascii-trace.cc'

    obj = bld.create_ns3_program('tutorial-csma-echo-pcap-trace', ['internet-node', 'csma'])
    obj.source = 'tutorial-csma-echo-pcap-trace.cc'

    obj = bld.create_ns3_program('tutorial-point-to-point', ['internet-node', 'point-to-point'])
    obj.source = 'tutorial-point-to-point.cc'

    obj = bld.create_ns3_program('tutorial-star', ['internet-node', 'point-to-point'])
    obj.source = ['tutorial-star.cc',
                  'point-to-point-ipv4-topology.cc']

    obj = bld.create_ns3_program('tutorial-star-routing', ['internet-node', 'point-to-point'])
    obj.source = ['tutorial-star-routing.cc',
                  'point-to-point-ipv4-topology.cc']

    obj = bld.create_ns3_program('tutorial-linear-dumbbell', ['internet-node', 'point-to-point'])
    obj.source = 'tutorial-linear-dumbbell.cc'

    obj = bld.create_ns3_program('testipv4', ['node'])
    obj.source = ['testipv4.cc', 'ipv4-address-generator.cc']

    obj = bld.create_ns3_program('tutorial-bus-network', ['internet-node'])
    obj.source = ['tutorial-bus-network.cc',
                  'ipv4-bus-network.cc',
                  'ipv4-address-generator.cc']
