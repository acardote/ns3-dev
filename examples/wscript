## -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

def build(bld):
    obj = bld.create_ns3_program('aodv')
    obj.source = 'aodv.cc'
 
    obj = bld.create_ns3_program('aodv2')
    obj.source = 'aodv2.cc'   
    
    obj = bld.create_ns3_program('aodv_crash')
    obj.source = 'aodv_random_disc.cc'   

    obj = bld.create_ns3_program('aodv-with-interface-down')
    obj.source = 'aodv-with-interface-down.cc'
       
#    obj = bld.create_ns3_program('hello-simulator')
#    obj.source = 'hello-simulator.cc'
#        
#    obj = bld.create_ns3_program('first',
#                                 ['core', 'simulator', 'point-to-point', 'internet-stack'])
#    obj.source = 'first.cc'
#        
#    obj = bld.create_ns3_program('second',
#                                 ['core', 'simulator', 'point-to-point', 'csma', 'internet-stack'])
#    obj.source = 'second.cc'
#        
#    obj = bld.create_ns3_program('third',
#                                 ['core', 'simulator', 'point-to-point', 'csma', 'wifi', 'internet-stack'])
#    obj.source = 'third.cc'
#        
#    obj = bld.create_ns3_program('object-names',
#                                 ['core', 'simulator', 'csma', 'internet-stack'])
#    obj.source = 'object-names.cc'
#        
#    obj = bld.create_ns3_program('mixed-wireless',
#                                 ['core', 'simulator', 'mobility', 'wifi', 'point-to-point', 'internet-stack'])
#    obj.source = 'mixed-wireless.cc'
#
#    obj = bld.create_ns3_program('dynamic-global-routing',
#                                 ['point-to-point', 'csma', 'internet-stack', 'global-routing'])
#    obj.source = 'dynamic-global-routing.cc'
#
#    obj = bld.create_ns3_program('static-routing-slash32',
#                                 ['point-to-point', 'internet-stack', 'global-routing'])
#    obj.source = 'static-routing-slash32.cc'
#
#    obj = bld.create_ns3_program('global-routing-slash32',
#                                 ['point-to-point', 'internet-stack', 'global-routing'])
#    obj.source = 'global-routing-slash32.cc'
#
#    obj = bld.create_ns3_program('simple-global-routing',
#                                 ['point-to-point', 'internet-stack', 'global-routing'])
#    obj.source = 'simple-global-routing.cc'
#
#    obj = bld.create_ns3_program('virtual-net-device',
#                                 ['point-to-point', 'internet-stack', 'global-routing', 'virtual-net-device'])
#    obj.source = 'virtual-net-device.cc'
#
#    obj = bld.create_ns3_program('simple-alternate-routing',
#                                 ['point-to-point', 'internet-stack', 'global-routing'])
#    obj.source = 'simple-alternate-routing.cc'
#
#    obj = bld.create_ns3_program('simple-error-model',
#                                 ['point-to-point', 'internet-stack'])
#    obj.source = 'simple-error-model.cc'
#
#    obj = bld.create_ns3_program('csma-one-subnet',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'csma-one-subnet.cc'
#
#    obj = bld.create_ns3_program('csma-bridge',
#                                 ['bridge', 'csma', 'internet-stack'])
#    obj.source = 'csma-bridge.cc'
#
#    obj = bld.create_ns3_program('csma-bridge-one-hop',
#                                 ['bridge', 'csma', 'internet-stack'])
#    obj.source = 'csma-bridge-one-hop.cc'
#
#    obj = bld.create_ns3_program('udp-echo',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'udp-echo.cc'
#
#    obj = bld.create_ns3_program('realtime-udp-echo',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'realtime-udp-echo.cc'
#
#    obj = bld.create_ns3_program('csma-broadcast',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'csma-broadcast.cc'
#
#    obj = bld.create_ns3_program('csma-packet-socket',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'csma-packet-socket.cc'
#
#    obj = bld.create_ns3_program('csma-multicast',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'csma-multicast.cc'
#
#    obj = bld.create_ns3_program( 'mixed-global-routing',
#                                  ['point-to-point', 'internet-stack', 'global-routing' , 'csma-cd'])
#    obj.source = 'mixed-global-routing.cc'
#
#    obj = bld.create_ns3_program('simple-point-to-point-olsr',
#                                 ['point-to-point', 'internet-stack', 'olsr'])
#    obj.source = 'simple-point-to-point-olsr.cc'
#
#    obj = bld.create_ns3_program('tcp-large-transfer',
#                                 ['point-to-point', 'internet-stack'])
#    obj.source = 'tcp-large-transfer.cc'
#
#    obj = bld.create_ns3_program('tcp-nsc-lfn',
#                                 ['point-to-point', 'internet-stack'])
#    obj.source = 'tcp-nsc-lfn.cc'
#
#    obj = bld.create_ns3_program('tcp-nsc-zoo',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'tcp-nsc-zoo.cc'
#
#    obj = bld.create_ns3_program('tcp-star-server',
#                                 ['point-to-point', 'internet-stack'])
#    obj.source = 'tcp-star-server.cc'
#
#    obj = bld.create_ns3_program('star',
#                                 ['point-to-point', 'internet-stack'])
#    obj.source = 'star.cc'
#
#    obj = bld.create_ns3_program('csma-star',
#                                 ['csma', 'internet-stack'])
#    obj.source = 'csma-star.cc'
#
#    obj = bld.create_ns3_program('wifi-adhoc',
#                                 ['core', 'simulator', 'mobility', 'wifi'])
#    obj.source = 'wifi-adhoc.cc'
#
#    obj = bld.create_ns3_program('wifi-clear-channel-cmu',
#                                 ['core', 'simulator', 'mobility', 'wifi'])
#    obj.source = 'wifi-clear-channel-cmu.cc'
#
#    obj = bld.create_ns3_program('wifi-ap',
#                                 ['core', 'simulator', 'mobility', 'wifi'])
#    obj.source = 'wifi-ap.cc'
#
#    bld.add_subdirs('stats')
#
#    obj = bld.create_ns3_program('wifi-wired-bridging',
#                                 ['core', 'simulator', 'mobility', 'wifi', 
#                                  'csma', 'helper', 'bridge'])
#    obj.source = 'wifi-wired-bridging.cc'
#
#    obj = bld.create_ns3_program('csma-raw-ip-socket',
#        ['csma', 'internet-stack'])
#    obj.source = 'csma-raw-ip-socket.cc'
#
    obj = bld.create_ns3_program('csma-ping',
        ['csma', 'internet-stack', 'v4ping'])
    obj.source = 'csma-ping.cc'
#
#    obj = bld.create_ns3_program('test-ipv6',
#      ['point-to-point', 'internet-stack'])
#    obj.source = 'test-ipv6.cc'
#
#    env = bld.env_of_name('default')
#    if env['ENABLE_EMU']:
#        obj = bld.create_ns3_program('emu-udp-echo', ['emu', 'internet-stack'])
#        obj.source = 'emu-udp-echo.cc'
#
#        obj = bld.create_ns3_program('emu-ping', ['emu', 'internet-stack'])
#        obj.source = 'emu-ping.cc'
#
#    if env['ENABLE_TAP']:
#        obj = bld.create_ns3_program('tap-wifi-dumbbell',
#                                     ['wifi', 'csma', 'point-to-point', 'tap-bridge', 'internet-stack'])
#        obj.source = 'tap-wifi-dumbbell.cc'
#
#    obj = bld.create_ns3_program('simple-wifi-frame-aggregation',
#                                 ['core', 'simulator', 'mobility', 'wifi'])
#    obj.source = 'simple-wifi-frame-aggregation.cc'
