/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
//
// Copyright (c) 2006 Georgia Tech Research Corporation
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation;
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//

#ifndef __packet_sink_h__
#define __packet_sink_h__

#include "ns3/application.h"
#include "ns3/event-id.h"
#include "ns3/ptr.h"

namespace ns3 {

class Address;
class Socket;
class Packet;

/**
 * \brief Receive and consume traffic generated to an IP address and port
 *
 * This Application can be used as a receiver for packets generated by
 * traffic sourcing applications such as OnOffApplication.  The constructor
 * specifies the Address (IP address and port) and the transport protocol
 * to use.   A virtual Receive () method is installed as a callback on 
 * the receiving socket.  By default, it prints out the size of packets
 * and their address.
 */
class PacketSink : public Application 
{
public:
  /**
   * \param n node associated to this application
   * \param local local ip address
   * \param iid
   * \param ontime on time random variable
   * \param offtime off time random variable
   */
  PacketSink (Ptr<Node> n,
              const Address &local,
              std::string iid, bool quiet=false);

  virtual ~PacketSink ();

  /**
   * \brief Turn off the logging output for the receive callback
   */
  void SetQuiet (void);

protected:
  virtual void DoDispose (void);
private:
  // inherited from Application base class.
  virtual void StartApplication (void);    // Called at time specified by Start
  virtual void StopApplication (void);     // Called at time specified by Stop

  void Construct (Ptr<Node> n,
                  const Address &local,
                  std::string iid,
                  bool quiet);

  virtual void Receive (Ptr<Socket> socket, const Packet& packet, const Address& from);

  Ptr<Socket>     m_socket;       // Associated socket
  Address         m_local;        // Local address to bind to
  std::string     m_iid;          // Protocol name (e.g., "Udp")
  bool            m_quiet;        // Governs whether receive callback is quiet 
  
};

} // namespace ns3

#endif

